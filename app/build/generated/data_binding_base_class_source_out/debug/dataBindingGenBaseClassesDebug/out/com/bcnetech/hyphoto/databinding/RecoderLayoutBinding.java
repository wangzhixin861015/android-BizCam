// Generated by data binding compiler. Do not edit!
package com.bcnetech.hyphoto.databinding;

import android.databinding.DataBindingUtil;
import android.databinding.ViewDataBinding;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.TextureView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.bcnetech.hyphoto.R;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class RecoderLayoutBinding extends ViewDataBinding {
  @NonNull
  public final RelativeLayout bottomView;

  @NonNull
  public final TextView delet;

  @NonNull
  public final ImageView ivCover;

  @NonNull
  public final ImageView ivPlay;

  @NonNull
  public final ImageView ivRotate;

  @NonNull
  public final ImageView ivWm;

  @NonNull
  public final TextView save;

  @NonNull
  public final RelativeLayout title;

  @NonNull
  public final TextureView videoTexture;

  protected RecoderLayoutBinding(Object _bindingComponent, View _root, int _localFieldCount,
      RelativeLayout bottomView, TextView delet, ImageView ivCover, ImageView ivPlay,
      ImageView ivRotate, ImageView ivWm, TextView save, RelativeLayout title,
      TextureView videoTexture) {
    super(_bindingComponent, _root, _localFieldCount);
    this.bottomView = bottomView;
    this.delet = delet;
    this.ivCover = ivCover;
    this.ivPlay = ivPlay;
    this.ivRotate = ivRotate;
    this.ivWm = ivWm;
    this.save = save;
    this.title = title;
    this.videoTexture = videoTexture;
  }

  @NonNull
  public static RecoderLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.recoder_layout, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static RecoderLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<RecoderLayoutBinding>inflateInternal(inflater, R.layout.recoder_layout, root, attachToRoot, component);
  }

  @NonNull
  public static RecoderLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.recoder_layout, null, false, component)
   */
  @NonNull
  @Deprecated
  public static RecoderLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<RecoderLayoutBinding>inflateInternal(inflater, R.layout.recoder_layout, null, false, component);
  }

  public static RecoderLayoutBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static RecoderLayoutBinding bind(@NonNull View view, @Nullable Object component) {
    return (RecoderLayoutBinding)bind(component, view, R.layout.recoder_layout);
  }
}
